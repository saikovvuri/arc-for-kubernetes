# This workflow will deploy an unmanaged Kubernetes k3s cluster running on an Azure Virtual Machine

name: Deploy Cluster

# Triggered manually
on:
  workflow_dispatch:
    inputs:
      credentials:
        required: true
        default: "AZURE_CREDENTIALS"
        description: The name of the GitHub Secret to use for deployment
      adminPasswordOrKey:
        required: true
        description: SSH Key or password for the Virtual Machine. SSH key is recommended.
      authenticationType:
        required: true
        default: sshPublicKey
        description: sshPublicKey or password. SSH key is recommended.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Azure Login
        uses: Azure/login@v1
        with:
          # See: https://github.com/jasoncabot-ms/arc-for-kubernetes/tree/main/00-setup
          creds: ${{ secrets[github.event.inputs.credentials] }}

      - name: Deploy a VM running k3s
        id: create_vm
        run: |
          # Per-repository secrets
          APP_ID=$(echo '${{ secrets[github.event.inputs.credentials] }}' | jq -r '.clientId')
          echo "::add-mask::$APP_ID"
          PASSWORD=$(echo '${{ secrets[github.event.inputs.credentials] }}' | jq -r '.clientSecret')
          echo "::add-mask::$PASSWORD"
          TENANT_ID=$(echo '${{ secrets[github.event.inputs.credentials] }}' | jq -r '.tenantId')
          echo "::add-mask::$TENANT_ID"
          ADMIN_PASSWORD_OR_KEY=$(jq -r '.inputs.adminPasswordOrKey' $GITHUB_EVENT_PATH)
          echo "::add-mask::\"$ADMIN_PASSWORD_OR_KEY\""

          # Assume that credentials have limited scope to a single resource group, so just pick the
          # first thing we can access and use that as the resource group to deploy to :)
          RG=$(az group list -o tsv --query '[0].name')
          echo "::add-mask::$RG"
          SUBSCRIPTION_ID=$(az account show --query 'id' -o tsv)
          echo "::add-mask::$SUBSCRIPTION_ID"

          DEPLOYMENT=$(az deployment group create -g "$RG" -n "${{ github.event_name }}-${GITHUB_SHA:0:7}-${{ github.run_id }}" --template-file "00-setup/azuredeploy.json" --parameters appId="$APP_ID" password="$PASSWORD" tenantId="$TENANT_ID" adminPasswordOrKey="$ADMIN_PASSWORD_OR_KEY" authenticationType="${{ github.event.inputs.authenticationType }}" githubRepo="$GITHUB_REPOSITORY" branch="${GITHUB_REF##*/}")
          SSH_COMMAND=$(echo $DEPLOYMENT | jq -r '.properties.outputs.sshCommand.value')
          echo "::set-output name=ssh_command::$SSH_COMMAND"
          
          # Allow the VM to manage identity
          PRINCIPAL_ID=$(az vm list -g $RG --query '[].identity.principalId' -o tsv)
          az role assignment create --role "Managed Identity Operator" --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG
          az role assignment create --role "Virtual Machine Contributor" --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG

      - name: Show SSH connection
        run: |
          echo "You can now access your new VM running Kubernetes"
          echo "Be sure to check Network Security Groups allowing Inbound access to port 22"
          echo "You will need your SSH public key or password depending on the value of adminPasswordOrKey"
          echo ${{ steps.create_vm.outputs.ssh_command }}
